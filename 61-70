//61

import re
list_numbers = []
sum = 0
sum_count = 0
multiply = 1
multiply_sum = 0
i = 1
while True:
 print("Введите число:", end=' ') 
 string = re.sub(r'\D', '', input())
 if len(string) == 0:
 print("В строке не обнаружено числа")
 continue
 number = int(string)
 list_numbers.append(number)
 if i % 2 != 0:
 sum += number
 sum_count += 1
 else:
 multiply = multiply * number
 multiply_sum += 1
 i += 1
 if list_numbers[len(list_numbers) - 1] == 55555:
 break
print("Сумма:", sum) 
print("количество слагаемых:", sum_count)
print("Произведение", multiply) 
print("Количество множителей:", multiply_sum)

//62

# -*- coding: utf-8 -*-
import re
list_numbers = []
sum = 0
sum_count = 0
i = 1
while True:
 print("Ввежите число:", end=' ')
 string = re.sub(r'[^0-9\-]+', '', input())
 if len(string) == 0:
 print("В строке не обнаружено числа")
 continue
 number = int(string)
 list_numbers.append(number)
 if i % 2 != 0:
 number *= -1
 else:
 number *= number
 sum += number
 i += 1
 if list_numbers[len(list_numbers) - 1] < 0:
 break
print("Сумма:", sum) 
print("Количество слагаемых:", i)

//63

import re
P = 2
H = 10
list_numbers = []
sum = 0
multiply = 1
count = 0
while True:
 print("Введите число:", end=' ')
 string = re.sub(r'[^0-9\-]+', '', input())
 if len(string) == 0:
 print("В строке не обнаружено числа")
 continue
 number = int(string)
 list_numbers.append(number)
 if number < P:
 sum += number
 elif number > H:
 multiply *= number
 if P < H:
 if P < number < H:
 count += 1
 else:
 if H < number < P:
 count += 1
 last_namber = list_numbers[len(list_numbers) - 1]
 if last_namber == P or last_namber == H:
 break
print("Сумма:", sum)
print("Произведение:", multiply) ������������
print("Количество чисел в диапазоне P и H:", count)

//64

import re
list_numbers = []
sum = 0
while True:
 print("Введите число :", end=' ')
 string = re.sub(r'[^0-9\-]+', '', input())
 if len(string) == 0:
 print("В строке не обнаружено числа") 
 continue
 number = int(string)
 list_numbers.append(number)
 if number == 99999:
 break
 elif number == 0:
 print("Сумма:", sum)
 else:
 sum += number
print("Сумма:", sum)

//65

import re
list_numbers = []
B = 5
sum = 0
while True:
 print("Введите число:", end=' ')
 string = re.sub(r'[^0-9\-]+', '', input())
 if len(string) == 0:
 print("В строке не обнаружено числа")
 continue
 number = int(string)
 list_numbers.append(number)
 if number < 0:
 break
 if number % B == 0:
 sum += number
print("Сумма:", sum)

//66

import re
list_numbers = []
count_positive = 0
count_negative = 0
while True:
 print("Введите число:", end=' ')
 string = re.sub(r'[^0-9\-]+', '', input())
 if len(string) == 0:
 print("В строке не обнаружено числа")
 continue
 number = int(string)
 if number * -1 == 65432:
 break
 list_numbers.append(number)
 if number < 0:
 count_negative += 1
 else:
 count_positive += 1
one_percent = 100 / len(list_numbers)
print("Процент положительных чисел:", one_percent * count_positive)
print("Процент отрицательных чисел:", one_percent * count_negative)

//67

import random
N = 6 
M = 4 
def get_row(column):
 col = []
 for i in range(0, column):
 col.append(random.randint(0, 9))
 return col
def get_matrix(row, column):
 matrix = []
 for i in range(0, row):
 matrix.append(get_row(column))
 return matrix
def listsum(list):
 sum = 0
 for element in list:
 sum += element
 return sum
def print_matrix(matrix):
 i = 0
 while i < len(matrix):
 j = 0
 row = matrix[i]
 while j < len(row):
 column = row[j]
 print(column, end=' ')
 j += 1
 print()
 i += 1
A = get_matrix(N, M)
tmp = list(zip(*A))
max_sum = 0
index_column_max_sum = 0
i = 0
while i < len(tmp):
 column = tmp[i]
 current_list_sum = listsum(column)
 if current_list_sum > max_sum:
 max_sum = current_list_sum
 index_column_max_sum = i
 i += 1
print("Матрица:") 
print_matrix(A)
print("Столбец для которого сумма абсолютных значений элементов максимальна:",index_column_max_sum)
print("Наибольший элемент того столбца:", max(tmp[index_column_max_sum]))

//68

import random
N = 2 
M = 3 
def get_row(column):
 col = []
 for i in range(0, column):
 col.append(random.randint(0, 9))
 return col
def get_matrix(row, column):
 matrix = []
 for i in range(0, row):
 matrix.append(get_row(column))
 return matrix
def print_matrix(matrix):
 i = 0
 while i < len(matrix):
 j = 0
 row = matrix[i]
 while j < len(row):
 column = row[j]
 print(column, end=' ')
 j += 1
 print()
 i += 1
def get_average(row):
 sum = 0
 for element in row:
 sum += element
 return sum/len(row)
A = get_matrix(N, M)
print("Матрица:") 
print_matrix(A)
n = 0
for row in A:
 average = get_average(row)
 if average > n:
 n = average
print("наибольшее значение среди средних значений строки :", n)

//69

import random
N = 2 
M = 3 
def get_row(column):
 col = []
 for i in range(0, column):
 col.append(random.randint(0, 9))
 return col
def get_matrix(row, column):
 matrix = []
 for i in range(0, row):
 matrix.append(get_row(column))
 return matrix
def listsum(list):
 sum = 0
 for element in list:
 sum += element
 return sum
def print_matrix(matrix):
 i = 0
 while i < len(matrix):
 j = 0
 row = matrix[i]
 while j < len(row):
 column = row[j]
 print(column, end=' ')
 j += 1
 print()
 i += 1
A = get_matrix(N, M)
tmp = list(zip(*A))
max_sum = 0
index_column_max_sum = 0
i = 0
while i < len(tmp):
 column = tmp[i]
 current_list_sum = listsum(column)
 if current_list_sum > max_sum:
 max_sum = current_list_sum
 index_column_max_sum = i
 i += 1
print("Матрица:")
print_matrix(A)
print("Столбец для которого сумма абсолютных значений элементов максимальна:", index_column_max_sum)
print("Максимальный элемент этого столбца:", min(tmp[index_column_max_sum]))

//70

import random
N = 2
M = 3 
def get_row(column):
 col = []
 for i in range(0, column):
 col.append(random.randint(0, 9))
 return col
def get_matrix(row, column):
 matrix = []
 for i in range(0, row):
 matrix.append(get_row(column))
 return matrix
def print_matrix(matrix):
 i = 0
 while i < len(matrix):
 j = 0
 row = matrix[i]
 while j < len(row):
 column = row[j]
 print(column, end=' ')
 j += 1
 print()
 i += 1
def get_average(row):
 sum = 0
 for element in row:
 sum += element
 return sum/len(row)
A = get_matrix(N, M)
print("Матрица:") 
print_matrix(A)
n = False
for row in A:
 average = get_average(row)
 if n is False or average < n:
 n = average
print("наименьшее значение среди средних значений для каждой строки матрицы:", n)
 
