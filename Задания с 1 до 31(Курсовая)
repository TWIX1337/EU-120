#0
import numpy as np
N = 4
M = 5

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}".format(A))

sum = A.sum(axis=0)
index = sum.argmax(axis=0)
max = A.max(axis=0)
max = max[index]

print("Наибольшее значение: {}".format(max))
#1
import numpy as np

N = 4
M = 5

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}".format(A))

Average = A.mean(axis=1)
index = Average.argmax(axis=0)
max = Average.max(axis=0)

print("Наибольшее среднее значение: {}".format(max))
#2
import numpy as np

N = 4
M = 5

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}".format(A))

sum = A.sum(axis=0)
index = sum.argmin(axis=0)
min = A.min(axis=0)
min = min[index]

print("Наименьшее значение: {}".format(min))
#3
import numpy as np

N = 4
M = 5

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}".format(A))

Average = A.mean(axis=1)
index = Average.argmin(axis=0)
min = Average.min(axis=0)

print("Наименьшее среднее значение: {}".format(min))
#4
import numpy as np

N = 4
M = 5

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

Average_line = A.mean(axis=1)
Average_column = A.mean(axis=0)
Average_line = Average_line[: , np.newaxis]
A = np.hstack((A, Average_line))
Average_column = np.hstack((Average_column, [0.]))
A = np.vstack((A, Average_column))

print("Новая матрица:\r\n{}\n".format(A))
#5
import numpy as np

N = 4
M = 5

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

Sum = A.sum()
B=np.sum(A)
M_sum = np.sum(A, axis=0)/np.sum(A)
A = np.vstack((A,M_sum))
print("Новая матрица:\r\n{}\n".format(A))
#6
import numpy as np

N = 4
M = 5

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

Sum = A.sum()
print("Сумма элементов всей матрицы: " + str(Sum) + "\n")
Sum_column = A.sum(axis=1)
X = []
for i in range(0, N):
    n = Sum_column[i] / Sum
    X.append(n)
X = np.array(X)[: , np.newaxis]
A = np.hstack((A, X))

print(A)
#7
import numpy as np

N = 4
M = 5

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

X = []
for i in range(0, N):
    K = 0
    for j in range(0, M):
        if A[i,j] < 0:
            K += 1
    X.append(K)
Y = []
for i in range(0, M):
    K = 0
    for j in range(0, N):
        if A[j,i] < 0:
            K += 1
    Y.append(K)
X = np.array(X)[: , np.newaxis]
A = np.hstack((A, X))
Y = np.hstack((Y, [0.]))
A = np.vstack((A, Y))

print("Новая матрица:\r\n{}\n".format(A))
#8
import numpy as np

N = 4
M = 5
L = np.random.randint(0, 3)
K = np.random.randint(0, 3)

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

n = 0
for i in range(0, L):
    for j in range(0, M):
        if A[i,j] == 0:
            n += 1
print("Количество нулевых элементов в верхних L солбцах: {}\n".format(n))
m = 0
for i in range(0, K):
    for j in range(0, N):
        if A[j,i] == 0:
            m += 1
print("Количество нулевых элементов в левых L солбцах: {}\n".format(m))
#9
import numpy as np

N = 4
M = 5
K = np.random.randint(1, 3)

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

K_arr = np.array(A[:, K-1])
K_arr = K_arr[: , np.newaxis]
print("K-ый столбец: \r\n{}\n".format(K_arr))
A = A * K_arr

print("Новая матрица:\r\n{}\n".format(A))
#10
import numpy as np

N = 4
M = 5
L = np.random.randint(1, 3)

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

L_arr = np.array(A[L-1, :])
print("L страка: \r\n{}\n".format(L_arr))
A = A + L_arr

print("Новая матрица:\r\n{}\n".format(A))
#11
import numpy as np

N = 4
M = 5

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

Max = A.max(axis=1)
Max = np.array(Max)[: , np.newaxis]
A = A / Max

print("Новая матрица:\r\n{}\n".format(A))
#12
import numpy as np

N = 4
M = 5

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

Max = A.max(axis=0)
A = A / Max

print("Новая матрица:\r\n{}\n".format(A)
#13
import numpy as np

N = 4
M = 5

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

Max = A.max()
print(Max)
A = A / Max

print("Новая матрица:\r\n{}\n".format(A))
#14
import numpy as np

N = 4
M = 5

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

bool = A == 0
col = np.sum(bool, axis=1)
A = np.insert(A, M, col, axis=1)
row = np.append(np.sum(bool, axis=0), 0)
A = np.insert(A, N, row, axis=0)
print("Новая матрица:\r\n{}\n".format(A))
#15
import numpy as np

N = 4
M = 5
H = np.random.randint(1, 4)

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

a = []
b = []
for i in range(M):
    if H in A[:, i]:
        a.append(i+1)
    else:
        b.append(i+1)
print("Столбцы, которые имеют хотя бы одно число H - {}\n".format(a))
print("Столбцы, которые не имеют это число - {}\n".format(b))
#16
import numpy as np

N = 4
M = 5
L = np.random.randint(1, 3)

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

print("L = " + str(L))
A = np.delete(A, (L-1), axis=0)

print("Новая матрица:\r\n{}\n".format(A))
#17
import numpy as np

N = 4
M = 5
L = np.random.randint(1, 3)

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

a = np.random.randint(0, 10, M)
print("Допонлительная строка: " + str(a))
print("\n L = " + str(L))

row = np.random.randint(low=-9, high=10, size=M)
print("Строка для вставки: {}".format(row))
A = np.insert(A, L, row, axis=0)

print("Новая матрица:\r\n{}\n".format(A))
#18
import numpy as np

N = 4
M = 5

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

a = np.diagonal(A)
a_sum = a.sum()
print("Главная диагональ: \n" + str(a) + "\n Её сумма = " + str(a_sum))
b = np.fliplr(A).diagonal(0)
b_sum = b.sum()
print("Побочная диагональ: \n" + str(b) + "\n Её сумма = " + str(b_sum))
#19
import numpy as np

N = 4
M = 5

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

a = np.diagonal(A, 1)
a_sum = a.sum()
print("Элементы которые выше главной диагонали: \n" + str(a) + "\nИх сумма = " + str(a_sum))
b = np.diagonal(A, -1)
b_sum = b.sum()
print("Элементы которые ниже главной диагонали: \n" + str(b) + "\nИх сумма = " + str(a_sum))
#20
import numpy as np

N = 4
M = 5

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

a = b = np.fliplr(A).diagonal(1)
a_prod = a.prod()
print("Элементы которые выше побочной диагонали: \n" + str(a) + "\nИх сумма = " + str(a_prod))
b = np.fliplr(A).diagonal(-1)
b_prod = b.prod()
print("Элементы которые ниже побочной диагонали: \n" + str(b) + "\nИх сумма = " + str(b_prod))
#21
import numpy as np

N = 4
M = 4

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

B = (A + A.T)/2
print("Новая матрица:\r\n{}\n".format(B))
#22
import numpy as np

N = 4
M = 5

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

col = [i % 2 for i in np.sum(A, axis=1)]
A = np.insert(A, M, col, axis=1)

print("Новая матрица:\r\n{}\n".format(A))
#23
import numpy as np

N = 4
M = 5

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

iu = np.triu_indices(N, 1)
a = A[iu]
a = np.sum(np.array(a))
print("\nCумма элементов выше главной диагонали = " + str(a))
b = np.fliplr(A)[iu]
b = np.prod(np.array(b))
print("\nПроизведение элементов выше побочной диагонали = " + str(b))
#24
import numpy as np

N = 4
M = 5
L = np.random.randint(1, 3)
K = np.random.randint(1, 3)

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))
x = A[0:L ,0:K]
x_sum = x.sum()
print("Вверхняя левая часть: сумма равна = " + str(x_sum) + "\n" + str(x))
y = A[L: ,0 :K]
y_sum = y.sum()
print("\nНижняя левая часть: сумма равна = " + str(y_sum) + "\n" + str(y))
z = A[0:L ,K:]
z_sum = z.sum()
print("\nВверхняя правая часть: сумма равна = " + str(z_sum) + "\n" + str(z))
a = A[L: ,K:]
a_sum = a.sum()
print("\nНижняя правая часть: сумма равна = " + str(a_sum) + "\n" + str(a))
#25
import numpy as np

N = 4
M = 5

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

bool = A == 0
col = np.sum(bool, axis=1)
A = np.insert(A, M, col, axis=1)
row = np.append(np.sum(bool, axis=0), 0)
A = np.insert(A, N, row, axis=0)
print("Новая матрица:\r\n{}\n".format(A))
#26
import numpy as np

N = 4
M = 5
L = np.random.randint(1, 3)
K = np.random.randint(1, 3)

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))
# Разделение матрицы на 4 части и нахождение среднее арифметическое
x = A[0:L ,0:K]
x_sum = x.mean()
print("Вверхняя левая часть: среднее арифметическое = " + str(x_sum) + "\n" + str(x))
y = A[L: ,0 :K]
y_sum = y.mean()
print("\nНижняя левая часть: среднее арифметическое = " + str(y_sum) + "\n" + str(y))
z = A[0:L ,K:]
z_sum = z.mean()
print("\nВверхняя правая часть: среднее арифметическое = " + str(z_sum) + "\n" + str(z))
a = A[L: ,K:]
a_sum = a.mean()
print("\nНижняя правая часть: среднее арифметическое = " + str(a_sum) + "\n" + str(a))
#27
import numpy as np

N = 4
M = 5
H = np.random.randint(1, 3)

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

bool = A == H
col_sum = np.sum(bool, axis=1)

print("Строки в которых встречается значение {}:".format(H))
print(np.argwhere(col_sum).flatten())
print("Строки в которых нет значения {}:".format(H))
print(np.argwhere(col_sum == 0).flatten())
#28
import numpy as np

N = 4
M = 5
K = np.random.randint(1, 3)

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))
print("K = " + str(K))
A = np.delete(A, (K-1), axis=1)
print("Новая матрица:\r\n{}\n".format(A))
#29
import numpy as np

N = 4
M = 5
H = np.random.randint(1, 3)

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

bool = A == H
col_sum = np.sum(bool, axis=1)

print("Строки в которых встречается значение {}:".format(H))
print(np.argwhere(col_sum).flatten())
print("Строки в которых нет значения {}:".format(H))
print(np.argwhere(col_sum == 0).flatten())
#30
import numpy as np

N = 4
M = 5
K = np.random.randint(1, 3)

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

M_n = np.sum(A, axis=0) * (-1)
A = np.vstack((A, M_n))

print("Новая матрица:\r\n{}\n".format(A))
#31
import numpy as np

N = 4
M = 5
K = np.random.randint(1, 3)

A = np.random.randint(low=-9, high=10, size=(N, M))
print("Матрица:\r\n{}\n".format(A))

M_n = np.sum(A, axis=1) * (-1)
A = np.hstack((A, M_n.reshape(-1, 1)))

print("Новая матрица:\r\n{}\n".format(A))

